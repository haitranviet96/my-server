name: Deploy to My Server

run-name: ${{ github.actor }} is deploying to My Server üöÄ

on:
  push:
    branches:
      - main

env:
  MACHINE: daimo-dc

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name: Configure GPG Key
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
          gpg --list-secret-keys

      - name: SOPS
        shell: bash {0}
        run: |
          SOPS_LATEST_VERSION=$(curl -s "https://api.github.com/repos/mozilla/sops/releases/latest" | grep -Po '"tag_name": "v\K[0-9.]+')
          curl -Lo sops.deb "https://github.com/mozilla/sops/releases/latest/download/sops_${SOPS_LATEST_VERSION}_amd64.deb"
          sudo apt --fix-broken install ./sops.deb
          rm -rf sops.deb
          sops -version
          sops -d -i -- caddy/caddy.env

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Add SSH key
        id: ssh
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          MACHINE_IP="$(tailscale ip -6 $MACHINE)"
          ssh-keyscan $MACHINE_IP >> ~/.ssh/known_hosts
          printf "%s" "$SSH_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key

      - name: Copy and Deploy
        id: deploy
        run: |
          TIME=$(date +%Y%m%d-%H%M%S)
          MACHINE_IP="$(tailscale ip -6 $MACHINE)"
          ssh -i ~/.ssh/key "haitv@$MACHINE_IP" "rm -rf ~/my-server;"
          GLOBIGNORE=".git:.github:README.md" scp -i ~/.ssh/key -r ${{ github.workspace }} "haitv@[$MACHINE_IP]://home/haitv/"
          ssh -i ~/.ssh/key "haitv@$MACHINE_IP" "cd ~/my-server;docker compose down;docker compose up -d;"

      - run: echo "üçè This job's status is ${{ job.status }}."
